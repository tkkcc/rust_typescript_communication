// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "test.proto" (package "tttt", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message tttt.Color
 */
export interface Color {
    /**
     * @generated from protobuf field: uint32 red = 1;
     */
    red: number;
    /**
     * @generated from protobuf field: uint32 blue = 2;
     */
    blue: number;
    /**
     * @generated from protobuf field: uint32 green = 3;
     */
    green: number;
}
/**
 * @generated from protobuf message tttt.Point
 */
export interface Point {
    /**
     * @generated from protobuf field: uint32 x = 1;
     */
    x: number;
    /**
     * @generated from protobuf field: uint32 y = 2;
     */
    y: number;
}
/**
 * @generated from protobuf message tttt.ColorPoint
 */
export interface ColorPoint {
    /**
     * @generated from protobuf field: tttt.Color color = 1;
     */
    color?: Color;
    /**
     * @generated from protobuf field: tttt.Point point = 2;
     */
    point?: Point;
    /**
     * @generated from protobuf field: float tolerance = 3;
     */
    tolerance: number;
    /**
     * @generated from protobuf field: string name = 4;
     */
    name: string;
    /**
     * @generated from protobuf field: optional float tolerance2 = 5;
     */
    tolerance2?: number;
    /**
     * @generated from protobuf field: repeated tttt.ColorPoint children = 6;
     */
    children: ColorPoint[];
    /**
     * @generated from protobuf field: map<string, tttt.ColorPoint> info = 7;
     */
    info: {
        [key: string]: ColorPoint;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class Color$Type extends MessageType<Color> {
    constructor() {
        super("tttt.Color", [
            { no: 1, name: "red", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "blue", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "green", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<Color>): Color {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.red = 0;
        message.blue = 0;
        message.green = 0;
        if (value !== undefined)
            reflectionMergePartial<Color>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Color): Color {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 red */ 1:
                    message.red = reader.uint32();
                    break;
                case /* uint32 blue */ 2:
                    message.blue = reader.uint32();
                    break;
                case /* uint32 green */ 3:
                    message.green = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Color, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 red = 1; */
        if (message.red !== 0)
            writer.tag(1, WireType.Varint).uint32(message.red);
        /* uint32 blue = 2; */
        if (message.blue !== 0)
            writer.tag(2, WireType.Varint).uint32(message.blue);
        /* uint32 green = 3; */
        if (message.green !== 0)
            writer.tag(3, WireType.Varint).uint32(message.green);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tttt.Color
 */
export const Color = new Color$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Point$Type extends MessageType<Point> {
    constructor() {
        super("tttt.Point", [
            { no: 1, name: "x", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "y", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<Point>): Point {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.x = 0;
        message.y = 0;
        if (value !== undefined)
            reflectionMergePartial<Point>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Point): Point {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 x */ 1:
                    message.x = reader.uint32();
                    break;
                case /* uint32 y */ 2:
                    message.y = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Point, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 x = 1; */
        if (message.x !== 0)
            writer.tag(1, WireType.Varint).uint32(message.x);
        /* uint32 y = 2; */
        if (message.y !== 0)
            writer.tag(2, WireType.Varint).uint32(message.y);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tttt.Point
 */
export const Point = new Point$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ColorPoint$Type extends MessageType<ColorPoint> {
    constructor() {
        super("tttt.ColorPoint", [
            { no: 1, name: "color", kind: "message", T: () => Color },
            { no: 2, name: "point", kind: "message", T: () => Point },
            { no: 3, name: "tolerance", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 4, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "tolerance2", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 6, name: "children", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ColorPoint },
            { no: 7, name: "info", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => ColorPoint } }
        ]);
    }
    create(value?: PartialMessage<ColorPoint>): ColorPoint {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.tolerance = 0;
        message.name = "";
        message.children = [];
        message.info = {};
        if (value !== undefined)
            reflectionMergePartial<ColorPoint>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ColorPoint): ColorPoint {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* tttt.Color color */ 1:
                    message.color = Color.internalBinaryRead(reader, reader.uint32(), options, message.color);
                    break;
                case /* tttt.Point point */ 2:
                    message.point = Point.internalBinaryRead(reader, reader.uint32(), options, message.point);
                    break;
                case /* float tolerance */ 3:
                    message.tolerance = reader.float();
                    break;
                case /* string name */ 4:
                    message.name = reader.string();
                    break;
                case /* optional float tolerance2 */ 5:
                    message.tolerance2 = reader.float();
                    break;
                case /* repeated tttt.ColorPoint children */ 6:
                    message.children.push(ColorPoint.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* map<string, tttt.ColorPoint> info */ 7:
                    this.binaryReadMap7(message.info, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap7(map: ColorPoint["info"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof ColorPoint["info"] | undefined, val: ColorPoint["info"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = ColorPoint.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field tttt.ColorPoint.info");
            }
        }
        map[key ?? ""] = val ?? ColorPoint.create();
    }
    internalBinaryWrite(message: ColorPoint, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* tttt.Color color = 1; */
        if (message.color)
            Color.internalBinaryWrite(message.color, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* tttt.Point point = 2; */
        if (message.point)
            Point.internalBinaryWrite(message.point, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* float tolerance = 3; */
        if (message.tolerance !== 0)
            writer.tag(3, WireType.Bit32).float(message.tolerance);
        /* string name = 4; */
        if (message.name !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.name);
        /* optional float tolerance2 = 5; */
        if (message.tolerance2 !== undefined)
            writer.tag(5, WireType.Bit32).float(message.tolerance2);
        /* repeated tttt.ColorPoint children = 6; */
        for (let i = 0; i < message.children.length; i++)
            ColorPoint.internalBinaryWrite(message.children[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* map<string, tttt.ColorPoint> info = 7; */
        for (let k of globalThis.Object.keys(message.info)) {
            writer.tag(7, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            ColorPoint.internalBinaryWrite(message.info[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tttt.ColorPoint
 */
export const ColorPoint = new ColorPoint$Type();
/**
 * @generated ServiceType for protobuf service tttt.RouteTest
 */
export const RouteTest = new ServiceType("tttt.RouteTest", [
    { name: "CheckColorPoint", options: {}, I: ColorPoint, O: ColorPoint },
    { name: "CheckPoint", options: {}, I: Point, O: Point }
]);
