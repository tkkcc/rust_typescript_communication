// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "test.proto" (package "tttt", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { RouteTest } from "./test";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { Point } from "./test";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { ColorPoint } from "./test";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service tttt.RouteTest
 */
export interface IRouteTestClient {
    /**
     * @generated from protobuf rpc: CheckColorPoint(tttt.ColorPoint) returns (tttt.ColorPoint);
     */
    checkColorPoint(input: ColorPoint, options?: RpcOptions): UnaryCall<ColorPoint, ColorPoint>;
    /**
     * @generated from protobuf rpc: CheckPoint(tttt.Point) returns (tttt.Point);
     */
    checkPoint(input: Point, options?: RpcOptions): UnaryCall<Point, Point>;
    /**
     * @generated from protobuf rpc: CheckPointStream(tttt.Point) returns (stream tttt.Point);
     */
    checkPointStream(input: Point, options?: RpcOptions): ServerStreamingCall<Point, Point>;
}
/**
 * @generated from protobuf service tttt.RouteTest
 */
export class RouteTestClient implements IRouteTestClient, ServiceInfo {
    typeName = RouteTest.typeName;
    methods = RouteTest.methods;
    options = RouteTest.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: CheckColorPoint(tttt.ColorPoint) returns (tttt.ColorPoint);
     */
    checkColorPoint(input: ColorPoint, options?: RpcOptions): UnaryCall<ColorPoint, ColorPoint> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<ColorPoint, ColorPoint>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: CheckPoint(tttt.Point) returns (tttt.Point);
     */
    checkPoint(input: Point, options?: RpcOptions): UnaryCall<Point, Point> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<Point, Point>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: CheckPointStream(tttt.Point) returns (stream tttt.Point);
     */
    checkPointStream(input: Point, options?: RpcOptions): ServerStreamingCall<Point, Point> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<Point, Point>("serverStreaming", this._transport, method, opt, input);
    }
}
